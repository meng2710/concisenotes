{"version":3,"sources":["api.js","internal.js","utils.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var JSZip, fs, internal;\n\nJSZip = require('jszip');\n\ninternal = require('./internal');\n\nfs = require('fs');\n\nmodule.exports = {\n  asBlob: function(html, options) {\n    var zip;\n    zip = new JSZip();\n    internal.addFiles(zip, html, options);\n    return internal.generateDocument(zip);\n  }\n};\n","var _, documentTemplate, fs, utils;\n\nfs = require('fs');\n\ndocumentTemplate = require('./templates/document');\n\nutils = require('./utils');\n\n_ = {\n  merge: require('lodash.merge')\n};\n\nmodule.exports = {\n  generateDocument: function(zip) {\n    var buffer;\n    buffer = zip.generate({\n      type: 'arraybuffer'\n    });\n    if (global.Blob) {\n      return new Blob([buffer], {\n        type: 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'\n      });\n    } else if (global.Buffer) {\n      return new Buffer(new Uint8Array(buffer));\n    } else {\n      throw new Error(\"Neither Blob nor Buffer are accessible in this environment. \" + \"Consider adding Blob.js shim\");\n    }\n  },\n  renderDocumentFile: function(documentOptions) {\n    var templateData;\n    if (documentOptions == null) {\n      documentOptions = {};\n    }\n    templateData = _.merge({\n      margins: {\n        top: 1440,\n        right: 1440,\n        bottom: 1440,\n        left: 1440,\n        header: 720,\n        footer: 720,\n        gutter: 0\n      }\n    }, (function() {\n      switch (documentOptions.orientation) {\n        case 'landscape':\n          return {\n            height: 12240,\n            width: 15840,\n            orient: 'landscape'\n          };\n        default:\n          return {\n            width: 12240,\n            height: 15840,\n            orient: 'portrait'\n          };\n      }\n    })(), {\n      margins: documentOptions.margins\n    });\n    return documentTemplate(templateData);\n  },\n  addFiles: function(zip, htmlSource, documentOptions) {\n    zip.file('[Content_Types].xml', fs.readFileSync(__dirname + '/assets/content_types.xml'));\n    zip.folder('_rels').file('.rels', fs.readFileSync(__dirname + '/assets/rels.xml'));\n    return zip.folder('word').file('document.xml', this.renderDocumentFile(documentOptions)).file('afchunk.mht', utils.getMHTdocument(htmlSource)).folder('_rels').file('document.xml.rels', fs.readFileSync(__dirname + '/assets/document.xml.rels'));\n  }\n};\n","var mhtDocumentTemplate, mhtPartTemplate;\n\nmhtDocumentTemplate = require('./templates/mht_document');\n\nmhtPartTemplate = require('./templates/mht_part');\n\nmodule.exports = {\n  getMHTdocument: function(htmlSource) {\n    var imageContentParts, ref;\n    ref = this._prepareImageParts(htmlSource), htmlSource = ref.htmlSource, imageContentParts = ref.imageContentParts;\n    htmlSource = htmlSource.replace(/\\=/g, '=3D');\n    return mhtDocumentTemplate({\n      htmlSource: htmlSource,\n      contentParts: imageContentParts.join('\\n')\n    });\n  },\n  _prepareImageParts: function(htmlSource) {\n    var imageContentParts, inlinedReplacer, inlinedSrcPattern;\n    imageContentParts = [];\n    inlinedSrcPattern = /\"data:(\\w+\\/\\w+);(\\w+),(\\S+)\"/g;\n    inlinedReplacer = function(match, contentType, contentEncoding, encodedContent) {\n      var contentLocation, extension, index;\n      index = imageContentParts.length;\n      extension = contentType.split('/')[1];\n      contentLocation = \"file:///C:/fake/image\" + index + \".\" + extension;\n      imageContentParts.push(mhtPartTemplate({\n        contentType: contentType,\n        contentEncoding: contentEncoding,\n        contentLocation: contentLocation,\n        encodedContent: encodedContent\n      }));\n      return \"\\\"\" + contentLocation + \"\\\"\";\n    };\n    if (typeof htmlSource === 'string') {\n      if (!/<img/g.test(htmlSource)) {\n        return {\n          htmlSource: htmlSource,\n          imageContentParts: imageContentParts\n        };\n      }\n      htmlSource = htmlSource.replace(inlinedSrcPattern, inlinedReplacer);\n      return {\n        htmlSource: htmlSource,\n        imageContentParts: imageContentParts\n      };\n    } else {\n      throw new Error(\"Not a valid source provided!\");\n    }\n  }\n};\n"]}